retrieve from https://aws.amazon.com/ko/what-is/api/

API란 ? 
: API는 Application Programming Iterface(애플리케이션 프로그램 인터페이스)의 줄임말으로써,
 정의 및 프로토콜 집합을 사용하여 두 소프트웨어 구성 요소가 서로 통신할 수 있게 하는 메커니즘이다.
 API의 맥락에서 애플리케이션은 고유한 기능을 가진 모든 소프트웨어를 나타낸다.
인터페이스는 두 애플리케이션 간의 서비스 계약이라 할 수 있으며, 이 계약은 요청과 응답을 사용하여
두 애플리케이션이 서로 통신하는 방법을 정의한다. API 문서에는 개발자가 이러한 요청과
응답을 구성하는 방법에 대한 정보가 들어 있다.

API 작동방식
: API의 구조는 일반적으로 클라이언트와 서버 측면에서 설명할 수 있다. 요청을 보내는 애플리케이션을
 클라이언트라고 하고, 응답을 보내는 애플리케이션을 서버라고 한다. API가 생성된 시기와 이유에 따라

 API는 다음과 같은 네 가지 방식으로 작동할 수 있다.
 1) SOAP API 
  : 단순 객체 접근 프로토콜을 사용하는 API로써, 클라이언트와 서버는 XML을 사용하여 메시지를 교환한다. 
    과거에 많이 사용되었던 API로, 유연성이 떨어진다.
 2) RPC API
 : 원격 프로시저 호출이다. 클라이언트가 서버에서 함수나 프로시저를 완료하면 
  서버가 출력을 클라이언트로 다시 전송한다.
 3) Websocket API
  : JSON 객체를 사용하여 데이터를 전달하는 최신 웹 API이다. WebSocket API는 클라이언트 앱과 서버 간의 
   양방향 통신을 지원한다. 서버가 연결된 클라이언트에 콜백 메시지를 전송할 수 있어 REST API보다 효율적이다.
 4) REST API
  : REST는 Representational State Transfer의 줄임말로써,  오늘날 웹에서 볼 수 있는 가장 많이 사용되는 API이다. 
   REST는 클라이언트가 서버 데이터에 액세스하는 데 사용할 수 있는 GET, PUT, DELETE 등의 함수 집합을 
   정의한다. 
   REST API의 주된 특징은 무상태이며, 무상태는 서버가 요청 간에 클라이언트 데이터를 저장하지 않음을 
   의미한다. 서버에 대한 클라이언트 요청은 웹 사이트를 방문하기 위해 브라우저에 입력하는 URL과 유사하다. 
   서버의 응답은 웹 페이지의 일반적인 그래픽 렌더링이 없는 일반 데이터이다.
  
 API의 생성 방법.
 1) API 계획
 2) API 빌드
 3) API 테스트
 4) API 문서화 ; 편의성을 높이는 가이드
 5) API 마케팅
